{"version":3,"sources":["hooks/useImageStorage.js","component/ProgressBar/ProfileImageProgressBar.js","component/Profile/UpdateProfile/UpdateProfile.js","component/Blogging/Add/GetData/GetImageData.js"],"names":["useStorage","file","id","state","imgId","useState","progress","setProgress","error","setError","url","setUrl","currentUser","useAuth","userId","uid","useEffect","a","console","log","storageRef","storage","ref","name","collectionRef","firestore","collection","getProfile","data","instance","get","then","response","obj","Object","keys","catch","err","put","on","snap","percentage","bytesTransferred","totalBytes","getDownloadURL","createdAt","timestamp","add","info","imageUrl","description","delete","post","res","ProgressBar","setFile","setId","ifImg","setIfImg","setImgId","useImageStorage","className","style","width","UpdateProfile","nameRef","useRef","locationRef","imageRef","emailRef","passwordRef","passwordConfirmedRef","updateProfile","loading","setLoading","image","setImage","history","useHistory","email","setEmail","docs","useFirestore","e","preventDefault","current","value","nameValue","profileName","locationValue","profileLocation","imageValue","profilePic","profile","images","location","following","followers","emailAddress","profileId","push","addProfile","ifProfile","setIfProfile","setProfileName","setProfileLocation","setProfileId","setProfilePic","dataChanged","setDataChanged","datas","setData","changed","date","Date","getMonth","String","getDate","padStart","getFullYear","results","key","unshift","GetData","dataValue","dataId","values","deleteImg","showImg","length","src","onClick","img","alt","Error","message","type","onChange","event","target","accept","selected","files","includes","minLength","autoComplete","placeholder","disabled","href"],"mappings":"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","file":"static/js/8.394188fe.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { storage, firestore, timestamp } from '../firebase';\r\nimport { useAuth } from '../component/Authentication/AuthContext/AuthContext';\r\nimport instance from '../axios-orders';\r\n\r\nconst useStorage = (file, id, state, imgId) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n    const { currentUser } = useAuth();\r\n    const [profile, setProfile] = useState('');\r\n\r\n    const userId = currentUser.uid;\r\n    // useEffect is going to run everytime the [file] changes\r\n    useEffect(async () => {\r\n        // references\r\n        console.log(id + ' from useStorage.js')\r\n        const storageRef = storage.ref(file.name);\r\n        const collectionRef = firestore.collection(userId)\r\n        // const collectionRef = firestore.collection('images')\r\n        // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        //     \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        // const date = new Date()\r\n        // const month = monthNames[date.getMonth()];\r\n        // const day = String(date.getDate()).padStart(2, '0');\r\n        // const year = date.getFullYear();\r\n        // const output = year + '/' + month + '/' + day;\r\n\r\n\r\n\r\n        const getProfile = async () => {\r\n            let data = ''\r\n            await instance.get(`users/${currentUser.uid}/profile.json`)\r\n                .then(response => {\r\n                    console.log(response.data)\r\n                    const obj = Object.keys(response.data);\r\n                    console.log(obj[0]);\r\n                    data = obj[0]\r\n                })\r\n                .catch(err => console.log(err));\r\n\r\n            return await data;\r\n\r\n        }\r\n\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url: url, createdAt });\r\n            setUrl(url);\r\n            // add instance post here of url & createdAt\r\n            const info = {\r\n                imageUrl: url,\r\n                description: ''\r\n            }\r\n\r\n\r\n            await instance.delete(`users/${currentUser.uid}/profile/${id}/images/${imgId}.json`)\r\n                .then(response => {\r\n                    console.log(response)\r\n                })\r\n                .catch(err => console.log(err));\r\n\r\n\r\n\r\n            if (id) {\r\n\r\n\r\n                await instance.post(`users/${currentUser.uid}/profile/${id}/images.json`, info)\r\n                    .then(response => {\r\n                        console.log(response)\r\n                        console.log('img uploaded to firebase DB')\r\n                    })\r\n                    .catch(err => console.log(err));\r\n            }\r\n\r\n            if (!id) {\r\n                const results = getProfile();\r\n                results.then(async (res) => {\r\n                    await instance.post(`users/${currentUser.uid}/profile/${res}/images.json`, info)\r\n                        .then(response => {\r\n                            console.log(response)\r\n                            console.log('img uploaded to firebase DB')\r\n                        })\r\n                        .catch(err => console.log(err));\r\n                })\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        })\r\n\r\n\r\n\r\n\r\n    }, [file]);\r\n\r\n    return { progress, url, error }\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect, useState } from 'react';\r\nimport instance from '../../axios-orders';\r\nimport useImageStorage from '../../hooks/useImageStorage';\r\nimport { useAuth } from '../Authentication/AuthContext/AuthContext';\r\nimport './Progress.css';\r\n\r\nexport default function ProgressBar({ file, setFile, id, setId }) {\r\n    const [ifImg, setIfImg] = useState(false);\r\n    const [imgId, setImgId] = useState('');\r\n    const { url, progress } = useImageStorage(file, id, ifImg, imgId);\r\n    console.log(id + ' from progressBar.js');\r\n    console.log(progress, url);\r\n    const { currentUser } = useAuth();\r\n\r\n    useEffect(async () => {\r\n        if (url) {\r\n            setFile(null);\r\n            // setId(null);\r\n        }\r\n\r\n        await instance.get(`users/${currentUser.uid}/profile.json`)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                if (response.data) {\r\n                    const id = Object.keys(response.data);\r\n                    console.log(id);\r\n                    setImgId(id[0]);\r\n                    console.log('there is data');\r\n                    setIfImg(true);\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        console.log(imgId);\r\n\r\n    }, [url, setFile, setId, file])\r\n\r\n\r\n    return (\r\n        <div className='progress-bar'\r\n            style={{ width: progress + '%' }}>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport img from '../../../assets/images/logo3.png';\r\nimport { useAuth } from '../../Authentication/AuthContext/AuthContext';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Error from '../../Authentication/Error/Error';\r\nimport firebase, { storage } from '../../../firebase';\r\nimport instance from '../../../axios-orders';\r\nimport ProgressBar from '../../ProgressBar/ProfileImageProgressBar';\r\nimport ShowCurrentImages from '../../Blogging/Add/ShowCurrentImages/ShowCurrentImages';\r\nimport GetData from '../../Blogging/Add/GetData/GetImageData';\r\nimport useFirestore from '../../../hooks/useFirestore';\r\n\r\n\r\nexport default function UpdateProfile() {\r\n\r\n    const nameRef = useRef();\r\n    const locationRef = useRef();\r\n    const imageRef = useRef();\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const passwordConfirmedRef = useRef();\r\n    const { currentUser, updateProfile } = useAuth();\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [image, setImage] = useState(null);\r\n    const history = useHistory();\r\n    const [profile, setProfile] = useState([]);\r\n    const [email, setEmail] = useState('');\r\n    const { docs } = useFirestore(currentUser.uid);\r\n\r\n    async function submitHandler(e) {\r\n        e.preventDefault();\r\n\r\n        console.log(nameRef.current.value);\r\n        // console.log(emailRef.current.value);\r\n        // console.log(passwordRef.current.value);\r\n        // console.log(image);\r\n        if (passwordRef.current.value !== passwordConfirmedRef.current.value) {\r\n            return setError('Passwords do not match');\r\n        }\r\n\r\n\r\n        let nameValue = profileName;\r\n        let locationValue = profileLocation;\r\n        let imageValue = profilePic;\r\n\r\n        if (locationRef.current.value !== locationValue) {\r\n            locationValue = locationRef.current.value;\r\n        }\r\n        if (nameRef.current.value !== nameValue) {\r\n            nameValue = nameRef.current.value;\r\n        }\r\n        if (!profilePic) {\r\n            imageValue = ''\r\n        }\r\n\r\n\r\n\r\n\r\n        const profile = {\r\n            images: imageValue,\r\n            location: locationValue,\r\n            name: nameValue,\r\n            following: '',\r\n            followers: ''\r\n        }\r\n\r\n        let emailAddress = email;\r\n        if (emailRef.current.value !== email) {\r\n            emailAddress = emailRef.current.value\r\n        }\r\n\r\n        if (profileId) {\r\n            setError('');\r\n            setLoading(true);\r\n            await instance.put(`users/${currentUser.uid}/profile/${profileId}.json`, profile)\r\n                .then(response => {\r\n                    console.log(response.data)\r\n                })\r\n                .catch(err => console.log(err));\r\n            await updateProfile(emailAddress, passwordRef.current.value\r\n            )\r\n            history.push(\"/profile-blogs\");\r\n        }\r\n\r\n        if (!profileId) {\r\n            try {\r\n                setError('');\r\n                setLoading(true);\r\n                await updateProfile(emailAddress, passwordRef.current.value\r\n                )\r\n                await instance.post(`users/${currentUser.uid}/profile.json`, profile)\r\n                    .then(response => {\r\n                        console.log(response.data)\r\n                    })\r\n                    .catch(err => console.log(err));\r\n                history.push(\"/profile-blogs\");\r\n\r\n                // const storage = firebase.storage().ref(`${currentUser.uid}/profilePic/${image.name}`)\r\n                // const uploadPic = storage.put(image);\r\n                // uploadPic.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n                //     () => {\r\n                //         let downloadURL = uploadPic.snapshot.downloadURL\r\n                //         console.log('Picture has been uploaded');\r\n                //     })\r\n\r\n                // console.log('Account updated...')\r\n            } catch (e) {\r\n                setError(`Failed to update account, ${e}`);\r\n            }\r\n        }\r\n\r\n        setLoading(false);\r\n    }\r\n\r\n    const addProfile = async () => {\r\n        const profile = {\r\n            images: '',\r\n            location: '',\r\n            name: '',\r\n            following: '',\r\n            followers: ''\r\n        }\r\n        await instance.post(`users/${currentUser.uid}/profile.json`, profile)\r\n            .then(response => {\r\n                console.log(response.data)\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n\r\n    console.log(currentUser.uid)\r\n\r\n    const handleChange = (e) => {\r\n        if (ifProfile == false) {\r\n            addProfile();\r\n        }\r\n\r\n\r\n        const types = ['image/png', 'image/jpeg'];\r\n        let selected = e.target.files[0];\r\n\r\n\r\n        if (selected && types.includes(selected.type)) {\r\n            setImage(selected);\r\n            setError('');\r\n\r\n        } else {\r\n            setImage(null);\r\n            setError('Please select an image file (png or jpeg)');\r\n        }\r\n\r\n    }\r\n\r\n    const [ifProfile, setIfProfile] = useState(false);\r\n    const [profileName, setProfileName] = useState('');\r\n    const [profileLocation, setProfileLocation] = useState('');\r\n    const [profileId, setProfileId] = useState('');\r\n    const [profilePic, setProfilePic] = useState([]);\r\n    const [dataChanged, setDataChanged] = useState(null);\r\n    const { datas } = GetData(docs, profileId, dataChanged);\r\n    console.log(datas);\r\n    console.log(ifProfile);\r\n\r\n    // TODO: FIX THIS\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n\r\n        await instance.get(`users/${currentUser.uid}/profile.json`)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                let dataValue = '';\r\n                let dataId = '';\r\n                if (!response.data) {\r\n                    console.log(\"There is no data\");\r\n                }\r\n                if (response.data) {\r\n                    dataValue = Object.values(response.data)\r\n                    dataId = Object.keys(response.data);\r\n                    console.log(dataValue);\r\n                    console.log(dataId);\r\n                    setIfProfile(true);\r\n                }\r\n                if (!profileName) {\r\n                    if (dataValue) {\r\n                        setProfileName(dataValue[0].name);\r\n                    }\r\n                }\r\n                if (!profileLocation) {\r\n                    if (dataValue) {\r\n                        setProfileLocation(dataValue[0].location);\r\n                    }\r\n                }\r\n                setProfileId(dataId[0]);\r\n                setProfilePic(dataValue[0].images)\r\n                setEmail(currentUser.email);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n\r\n\r\n    }, [datas])\r\n\r\n\r\n\r\n    const deleteImg = async (e) => {\r\n        e.preventDefault();\r\n        await instance.delete(`users/${currentUser.uid}/profile/${profileId}/images/${datas[0].id}.json`)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                setDataChanged('changed');\r\n            })\r\n            .catch(err => console.log(err));\r\n        imageRef.current.value = null;\r\n\r\n    }\r\n\r\n    console.log(datas);\r\n\r\n    let showImg = ''\r\n    if (!datas) {\r\n        showImg = (\r\n            <div></div>\r\n        );\r\n    }\r\n    if (datas !== null) {\r\n        if (datas.length > 0) {\r\n            const images = Object.values(datas[0]);\r\n            console.log(images);\r\n            showImg = (\r\n                <div className='img'>\r\n                    <img key={datas[0].id} src={images[1]} />\r\n                    <button onClick={deleteImg}>Delete</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n    console.log(profilePic);\r\n    console.log(profileName);\r\n    console.log(profileId);\r\n\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n\r\n            <div className='signUp'>\r\n                <figure>\r\n                    <img src={img} alt={\"adventures with chu\"} />\r\n                </figure>\r\n                <h1>Edit Profile</h1>\r\n                {/* {JSON.stringify(currentUser.email)} */}\r\n                {/* {JSON.stringify(currentUser.email)} */}\r\n                {/* {currentUser && currentUser.email} */}\r\n                {/* {currentUser.email} */}\r\n                {error && <Error message={error} />}\r\n                {/* <form onSubmit={submitHandler}> */}\r\n                <form>\r\n                    <div className='input-form'>\r\n                        <label>Profile Name:</label>\r\n                        <input type='text' ref={nameRef} value={profileName} onChange={event => setProfileName(event.target.value)} />\r\n                    </div>\r\n                    <div className='input-form'>\r\n                        <label>Location:</label>\r\n                        <input type='text' ref={locationRef} value={profileLocation} onChange={event => setProfileLocation(event.target.value)} />\r\n                    </div>\r\n                    <div className='input-form'>\r\n                        <label>Profile Picture:</label>\r\n                        <input type='file' accept=\"image/png, image/jpeg\" onChange={handleChange} ref={imageRef} />\r\n                        {image && <div>{image.name}</div>}\r\n                        {image && <ProgressBar file={image} setFile={setImage} id={profileId} />}\r\n                    </div>\r\n                    {showImg}\r\n                    {/* <ShowCurrentImages data={datas} /> */}\r\n                    {/* <ShowCurrentImages data={datas} setSelectedImg={setSelectedImg} setSelectedId={setSelectedId} setSelectedDescription={setSelectedDescription} /> */}\r\n\r\n                    <div className='input-form'>\r\n                        <label>Email Address</label>\r\n                        <input type='email' ref={emailRef} value={email} onChange={event => setEmail(event.target.value)} />\r\n                    </div>\r\n                    <div className='input-form'>\r\n                        <label>Password</label>\r\n                        <input type='password' ref={passwordRef} minLength=\"6\" autoComplete='off' placeholder=\"Leave blank to keep original\" />\r\n                    </div>\r\n                    <div className='input-form'>\r\n                        <label>Confirm New Password</label>\r\n                        <input type='password' ref={passwordConfirmedRef} minLength=\"6\" autoComplete='off' placeholder=\"Leave blank to keep original\" />\r\n                    </div>\r\n\r\n                    <button disabled={loading} type='submit' className='button'\r\n                        onClick={submitHandler}\r\n                    >Update\r\n                    </button>\r\n                </form>\r\n                <div className='login'>\r\n                    <p><span><a href='/profile-blogs'>Cancel</a></span></p>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useAuth } from '../../../Authentication/AuthContext/AuthContext';\r\nimport instance from '../../../../axios-orders';\r\n\r\n\r\nexport default function GetData(file, id, dataChanged) {\r\n    const [datas, setData] = useState(null);\r\n    const [changed, setChanged] = useState(null);\r\n    const { currentUser } = useAuth();\r\n\r\n\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    const date = new Date()\r\n    const month = monthNames[date.getMonth()];\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n    const output = year + '/' + month + '/' + day;\r\n\r\n    const getProfile = async () => {\r\n        let data = ''\r\n        await instance.get(`users/${currentUser.uid}/profile.json`)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                const obj = Object.keys(response.data);\r\n                console.log(obj[0]);\r\n                data = obj[0]\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        return await data;\r\n    }\r\n\r\n\r\n    useEffect(async () => {\r\n        console.log(`id is: ${id}` + ' from GetData page')\r\n        console.log('grabs data from GetData page')\r\n\r\n\r\n\r\n\r\n\r\n        if (id) {\r\n            await instance.get(`users/${currentUser.uid}/profile/${id}/images.json`)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    const results = [];\r\n                    for (let key in response.data) {\r\n                        console.log(key);\r\n                        results.unshift({\r\n                            ...response.data[key],\r\n                            id: key,\r\n                        })\r\n                    }\r\n                    setData(results);\r\n                    // setChanged('grabbed image')\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n\r\n\r\n        if (!id) {\r\n            const results = getProfile();\r\n            results.then(async (res) => {\r\n                await instance.get(`users/${currentUser.uid}/profile/${res}/images.json`)\r\n                    .then(response => {\r\n                        console.log(response)\r\n                        const results = [];\r\n                        for (let key in response.data) {\r\n                            console.log(key);\r\n                            results.unshift({\r\n                                ...response.data[key],\r\n                                id: key,\r\n                            })\r\n                        }\r\n                        setData(results);\r\n                    })\r\n                    .catch(err => console.log(err));\r\n            })\r\n        }\r\n\r\n        // setData(allImages);\r\n\r\n    }, [file, dataChanged]);\r\n\r\n    return { datas, changed };\r\n}\r\n"],"sourceRoot":""}